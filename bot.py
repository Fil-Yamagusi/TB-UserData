#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    2023-12-14 @Fil
    –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –í–∏–∑–∏—Ç–∫–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –°–µ—Ä–≥–µ–µ–≤–∏—á–∞
    Fil FC –í–∏–∑–∏—Ç–∫–∞ –ü—É—à–∫–∏–Ω–∞
    fil_fc_pushkin_bot
    6886396528:AAHO-KXXB5NS63pKaBAnIIh1wkPrEPd10X8
    https://t.me/fil_fc_pushkin_bot
"""

import time
import random
import re
from urllib.parse import quote
from urllib.request import Request, urlopen

from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, Message
from answers import *


random.seed(time.time())

TOKEN = "6886396528:AAHO-KXXB5NS63pKaBAnIIh1wkPrEPd10X8"
bot = TeleBot(TOKEN)

markup = ReplyKeyboardMarkup(
    row_width=2,
    resize_keyboard=True)
markup.add(* ["‚ùì –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ",
              "üñº –°–∫–∏–Ω—å —Ñ–æ—Ç–∫—É",
              "‚úç –ö–∞–∫ –¥–µ–ª–∏—à–∫–∏?",
              "üë∂ –ö–∞–∫ –¥–µ—Ç–∏—à–∫–∏?",
              "‚ú¥Ô∏è –ü–æ–¥–µ–ª–∏—Å—å –∫–ª—ë–≤–æ–π —Ä–∏—Ñ–º–æ–π?",
              "üÜò –ü–ê–ú–ê–ì–ò–¢–ï"])


# –ó–¥–æ—Ä–æ–≤–∞–µ–º—Å—è, –≥–æ–≤–æ—Ä–∏–º –∫—Ä–∞—Ç–∫–æ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in ['–ø–∞–º–∞–≥–∏', '–ø–æ–º–æ–≥–∏', '–ø–æ–º–æ—â', '—ã–µ—Ñ–∫–µ', '—Ä—É–¥–¥—â', '—Ä—É–¥–∑']),
    content_types=["text"])
@bot.message_handler(
    commands=["start", "hello", "help"])
def handle_start(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ """
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤—£—Ç—ä, " +
        message.chat.first_name +
        "! ü§ù\n–Ø - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ü—É—à–∫–∏–Ω—ä.\n"
        "–°–æ –≤—Å—£–º—ä —É–≤–∞–∂–µ–Ω—ñ–µ–º—ä –∫—ä –Ω–∞—Å—Ç–æ—è—â–µ–º—É!\n\n"
        "–ú–æ–≥—É –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±—£ /about\n"
        "–í–æ—Ç-—Å—ä —Å–≤—£–∂—ñ—è –¥–∞–≥–µ—Ä–æ—Ç–∏–ø—ã –∏–∑—ä —Å–∞–ª–æ–Ω–∞ /photo\n"
        "–ù–æ–≤–æ—Å—Ç–∏ –æ –¥—£–ª–∞—Ö—ä –Ω–∞—Å—É—â–Ω—ã—Ö—ä /dela\n"
        "–û—Ö–æ—Ç–Ω–æ –ø–æ–¥—£–ª—é—Å—å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ –¥—£—Ç—è—Ö—ä /deti\n"
        "–ú–æ–≥—É –ø–æ–¥—£–ª–∏—Ç—å—Å—è –∑–Ω–∞—Ç–Ω–æ–π —Ä–∏—≥–º–æ–π /rhyme\n\n"
        "–í—Å–ø–æ–º–Ω–∏—Ç—å c–∏–∏ –ø–æ–≤–µ–ª–Ωi—è: /help",
        reply_markup=markup
    )


# –ö—Ä–∞—Ç–∫–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è –≤–µ–ª–∏–∫–æ–≥–æ –ø–æ—ç—Ç–∞. –°–ø–∞—Å–∏–±–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in ['–æ —Å–µ–±–µ', '–∫—Ç–æ —Ç—ã']),
    content_types=["text"])
@bot.message_handler(
    commands=["about"])
def handle_about(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è —Å –±–∏–æ–≥—Ä–∞—Ñ–∏–µ–π –ø–æ—ç—Ç–∞ """
    for phrase in answers_pushkin:
        bot.send_message(
            message.chat.id,
            phrase,
            parse_mode="HTML",
            reply_markup=markup)


# –û–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É –ü—É—à–∫–∏–Ω–∞
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in ['—Ñ–æ—Ç–æ', '—Ñ–æ—Ç–∫', '–∫–∞—Ä—Ç–∏–Ω']),
    content_types=["text"])
@bot.message_handler(commands=["photo"])
def handle_photo(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ñ–æ—Ç–æ """
    ext = ['.webp', '.jpg'][random.randint(0, 1)]
    with open(f"photo/{random.randint(1, 25)}{ext}", 'rb') as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption=get_answers_photo(),
            reply_markup=markup
        )


# –°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ –¥–µ–ª–∞—Ö –ü—É—à–∫–∏–Ω–∞. –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Ñ–∞–π–ª–µ
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in ['–¥–µ–ª–∞', '–¥–µ–ª–∏—à', '–≤—É–¥—Ñ']),
    content_types=["text"])
@bot.message_handler(commands=["dela"])
def handle_dela(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏ (—Ç–∏–ø–∞ —Ç–≤–∏—Ç—ã) """
    bot.send_message(
        message.chat.id,
        get_answers_dela() +
        "\n\n<i>–ó–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–ø–∞—Å–∏–±–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.</i>",
        parse_mode="HTML",
        reply_markup=markup)


# –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ –¥–µ—Ç—è—Ö –ü—É—à–∫–∏–Ω–∞. –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Ñ–∞–π–ª–µ
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in ['–¥–µ—Ç–∏', '–¥–µ—Ç—è', '–¥–µ—Ç–∫', '–≤—É–µ—à']),
    content_types=["text"])
@bot.message_handler(commands=["deti"])
def handle_deti(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ñ—Ä–∞–∑–æ—á–∫–∞–º–∏ –æ –¥–µ—Ç—è—Ö """
    bot.send_message(
        message.chat.id,
        get_answers_deti() +
        "\n\n<i>–ö—Å—Ç–∞—Ç–∏, —ç—Ç–æ —Ñ–∞–∫—Ç—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏! –û—à–∏–±–∫–∞ –Ω–∞ –æ—à–∏–±–∫–µ!</i>",
        parse_mode="HTML",
        reply_markup=markup)


# –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏–∫–æ–ª—å–Ω–∞—è —Ä–∏—Ñ–º–∞. –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Ñ–∞–π–ª–µ
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in ['—Ä–∏—Ñ–º', '–∑–∞—Ä–∏—Ñ–º', '–∫—Ä–Ω—å']),
    content_types=["text"])
@bot.message_handler(commands=["rhyme"])
def handle_rhyme(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ä–∏—Ñ–º–∞–º–∏ """
    bot.send_message(
        message.chat.id,
        get_answers_rhyme(),
        parse_mode="HTML",
        reply_markup=markup)


# –î–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
@bot.message_handler(commands=["description"])
def handle_description(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ """
    bot.send_message(
        message.chat.id,
        "–ö—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥, –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "/start = /hello = /help = "
        "['–ø–∞–º–∞–≥–∏', '–ø–æ–º–æ–≥–∏', '—ã–µ—Ñ–∫–µ', '—Ä—É–¥–¥—â', '—Ä—É–¥–∑']\n"
        "/about = ['–æ —Å–µ–±–µ', '–∫—Ç–æ —Ç—ã']\n"
        "/photo = ['—Ñ–æ—Ç–æ', '—Ñ–æ—Ç–∫', '–∫–∞—Ä—Ç–∏–Ω']\n"
        "/dela = ['–¥–µ–ª–∞', '–¥–µ–ª–∏—à', '–≤—É–¥—Ñ']\n"
        "/deti = ['–¥–µ—Ç–∏', '–¥–µ—Ç—è', '–¥–µ—Ç–∫', '–≤—É–µ—à']\n"
        "/rhyme = ['—Ä–∏—Ñ–º', '–∑–∞—Ä–∏—Ñ–º', '–∫—Ä–Ω—å']\n\n"
        "–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ —Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞–π–¥—ë—Ç"
        " –≤–æ —Ñ—Ä–∞–∑–µ, –∑–∞—Ç–æ –Ω–∞ —Å–ª–æ–≤–æ—Ñ–æ—Ä–º—ã –∏ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å:\n"
        "<i>–∑–∞—Ä–∏—Ñ–º—É–π —á—ë-–Ω–∏—Ç—å?</i>\n"
        "<i>—á—Ç–æ –¥–µ–ª–∞–µ—à—å?</i>\n"
        "<i>—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–º—å–µ, –æ –¥–µ—Ç—è—Ö?</i>\n",
        parse_mode="HTML",
        reply_markup=markup)


# –¢—É—Ç –ø—ã—Ç–∞—é—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∏—Ñ–º—ã. –ù–æ –≤–¥—Ä—É–≥ –Ω–∞–º –¥–∞—é—Ç —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –±–µ–∑ —Ä–∏—Ñ–º?
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in [
            '—Ç—É–ª–æ–≤–∏—â–µ', '–∂–∞–≤–æ—Ä–æ–Ω–æ–∫', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤—ã—Ö—É—Ö–æ–ª—å',
            '–∑–∞–º–æ—Ä–æ–∑–∫–∏', '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ø—Ä–æ–≤–æ–ª–æ–∫–∞']),
    content_types=["text"])
def handle_no_rhymes(message: Message):
    """ –†–µ–¥–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Ö–≤–∞–ª–∏–º –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã—Ö –∏—Å–∫–∞—Ç–µ–ª–µ–π —Ä–∏—Ñ–º """
    bot.send_message(
        message.chat.id,
        "–°—É–¥–∞—Ä—å –∏–ª–∏ —Å—É–¥–∞—Ä—ã–Ω—è!\n\n"
        "–ü–æ—Ä–∞–∂—ë–Ω –≤–∞—à–µ–π –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∏–ª–∏ —É–¥–∞—á–µ–π!\n"
        "–í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–∏—Ñ–º—É –∫ —Å–ª–æ–≤—É, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ –º–Ω–µ–Ω–∏—é "
        "–Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—ç—Ç–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–æ–π–Ω–æ–π —Ä–∏—Ñ–º—ã!\n\n"
        "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –í–æ —Å–ª–∞–≤—É —Ä—É—Å—Å–∫–æ–π –ø–æ—ç–∑–∏–∏! Deus vult!",
        parse_mode="HTML",
        reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤—ã—è—Å–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(content_types=["text"])
def handle_error(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    words = message.text.lower().split()
    has_russian_word = False
    find_word = ""
    vowels = list('–∞—è—É—é–æ—ë—ç–µ—ã–∏')

    for word in reversed(words):
        if len(word) < 3:
            continue
        if not any(char in vowels for char in word):
            continue
        if bool(re.fullmatch(r'(?i)[–∞-—è—ë ]+', word)):
            has_russian_word = True
            find_word = word
            break

    if has_russian_word:
        bot.reply_to(
            message,
            f"{find_word}, {find_word}... —Ö–º–º...\n"
            f"–ü–æ–ø—Ä–æ–±—É—é –∑–∞—Ä–∏—Ñ–º–æ–≤–∞—Ç—å! –ì–¥–µ –º–æ—è —Ç–µ—Ç—Ä–∞–¥—å —Å —Ä–∏—Ñ–º–∞–º–∏...",
            parse_mode="HTML",
            reply_markup=markup)

        url = "https://rifmovka.ru/rifma/{0}#similar".format(quote(find_word))
        # print(url)
        request_site = Request(url, headers={"User-Agent": "Mozilla/5.0"})
        try:
            webpage = urlopen(request_site).read().decode('utf-8')
            webpage = re.sub(r'<b>', '', webpage)
            webpage = re.sub(r'</b>', '', webpage)
            # pattern = "<meta name=\"description\" content=\"(.*): (.*)\">"
            pattern = r'<li class="vis [a-z]+" data-id="\d+">(.+)</li>'
            match = re.findall(pattern, webpage)

            if match:
                rhymes = match
                for r in rhymes:
                    if len(r) > 12:
                        rhymes.remove(r)
                random.shuffle(rhymes)
                rhymes = rhymes[0:7]
                answ = f"–ó–∞—Ü–µ–Ω–∏ —Ä–∏—Ñ–º—ã: <b>{find_word}</b> - {', '.join(rhymes)}"
            else:
                answ = f"–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–∏—Ñ–º—É –∫ —Å–ª–æ–≤—É <b>{find_word}</b> üßê"

            bot.send_message(
                message.chat.id,
                answ,
                parse_mode="HTML",
                reply_markup=markup)

        except Exception as ex:
            print(ex)
    else:
        bot.send_message(
            message.chat.id,
            "Mon ami, je ne te comprends pas!\n\n"
            "–ü–æ–º–æ—â—å —Ç–µ–±–µ –≤ –ø–æ–º–æ—â—å! /help",
            parse_mode="HTML",
            reply_markup=markup)


print(TOKEN)
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as ex:
        print(ex)
        time.sleep(5)
