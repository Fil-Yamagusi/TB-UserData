"""
2023-12-14 @Fil
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –í–∏–∑–∏—Ç–∫–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –°–µ—Ä–≥–µ–µ–≤–∏—á–∞
Fil FC –í–∏–∑–∏—Ç–∫–∞ –ü—É—à–∫–∏–Ω–∞
fil_fc_pushkin_bot
6886396528:AAHO-KXXB5NS63pKaBAnIIh1wkPrEPd10X8
https://t.me/fil_fc_pushkin_bot
"""

from telebot import TeleBot
from telebot.types import KeyboardButton, ReplyKeyboardMarkup, Message
from answers import (get_answers_photo, get_answers_deti,
                     get_answers_dela, get_answers_rhyme,
                     answers_pushkin)
import random
import time


random.seed(time.time())

TOKEN = "6886396528:AAHO-KXXB5NS63pKaBAnIIh1wkPrEPd10X8"
bot = TeleBot(TOKEN)

markup = ReplyKeyboardMarkup(
    row_width=2,
    resize_keyboard=True)
markup.add(* ["‚ùì –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ",
              "üñº –°–∫–∏–Ω—å —Ñ–æ—Ç–∫—É",
              "‚úç –ö–∞–∫ –¥–µ–ª–∏—à–∫–∏?",
              "üë∂ –ö–∞–∫ –¥–µ—Ç–∏—à–∫–∏?",
              "‚ú¥Ô∏è –ü–æ–¥–µ–ª–∏—Å—å –∫–ª—ë–≤–æ–π —Ä–∏—Ñ–º–æ–π?",
              "üÜò –ü–ê–ú–ê–ì–ò–¢–ï"])


# –ó–¥–æ—Ä–æ–≤–∞–µ–º—Å—è, –≥–æ–≤–æ—Ä–∏–º –∫—Ä–∞—Ç–∫–æ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in ['–ø–∞–º–∞–≥–∏', '–ø–æ–º–æ–≥–∏', '—ã–µ—Ñ–∫–µ', '—Ä—É–¥–¥—â', '—Ä—É–¥–∑']),
    content_types=["text"])
@bot.message_handler(
    commands=["start", "hello", "help"])
def handle_start(message: Message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤—£—Ç—ä, " +
        message.chat.first_name +
        "! ü§ù\n–Ø - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ü—É—à–∫–∏–Ω—ä.\n"
        "–°–æ –≤—Å—£–º—ä —É–≤–∞–∂–µ–Ω—ñ–µ–º—ä –∫—ä –Ω–∞—Å—Ç–æ—è—â–µ–º—É!\n\n"
        "–ú–æ–≥—É –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±—£ /about\n"
        "–í–æ—Ç—ä-—Å—ä —Å–≤—£–∂—ñ–µ –¥–∞–≥–µ—Ä–æ—Ç–∏–ø—ã –∏–∑—ä —Å–∞–ª–æ–Ω–∞ /photo\n"
        "–ù–æ–≤–æ—Å—Ç–∏ –æ –¥—£–ª–∞—Ö—ä –Ω–∞—Å—É—â–Ω—ã—Ö—ä /dela\n"
        "–û—Ö–æ—Ç–Ω–æ –ø–æ–¥—£–ª—é—Å—å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ –¥—£—Ç—è—Ö—ä /deti\n"
        "–ú–æ–≥—É –ø–æ–¥—£–ª–∏—Ç—å—Å—è –∑–Ω–∞—Ç–Ω–æ–π —Ä–∏—≥–º–æ–π /rhyme\n\n"
        "–í—Å–ø–æ–º–Ω–∏—Ç—å c–∏–∏ –ø–æ–≤–µ–ª–Ωi—è: /help",
        reply_markup=markup
    )


# –ö—Ä–∞—Ç–∫–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è –≤–µ–ª–∏–∫–æ–≥–æ –ø–æ—ç—Ç–∞. –°–ø–∞—Å–∏–±–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in ['–æ —Å–µ–±–µ', '–∫—Ç–æ —Ç—ã']),
    content_types=["text"])
@bot.message_handler(
    commands=["about"])
def handle_about(message: Message):
    for phrase in answers_pushkin:
        bot.send_message(
            message.chat.id,
            phrase,
            parse_mode="HTML",
            reply_markup=markup)


# –û–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É –ü—É—à–∫–∏–Ω–∞
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in [' —Ñ–æ—Ç', '–∫–∞—Ä—Ç–∏–Ω']),
    content_types=["text"])
@bot.message_handler(commands=["photo"])
def handle_photo(message: Message):
    with open(f"photo/{random.randint(1, 25)}.webp", 'rb') as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption=get_answers_photo(),
            reply_markup=markup
        )


# –°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ –¥–µ–ª–∞—Ö –ü—É—à–∫–∏–Ω–∞. –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Ñ–∞–π–ª–µ
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in [' –¥–µ–ª', '–≤—É–¥—Ñ']),
    content_types=["text"])
@bot.message_handler(commands=["dela"])
def handle_dela(message: Message):
    bot.send_message(
        message.chat.id,
        get_answers_dela() +
        "\n\n<i>–ó–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–ø–∞—Å–∏–±–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.</i>",
        parse_mode="HTML",
        reply_markup=markup)


# –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ –¥–µ—Ç—è—Ö –ü—É—à–∫–∏–Ω–∞. –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Ñ–∞–π–ª–µ
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in [' –¥–µ—Ç', '–≤—É–µ—à']),
    content_types=["text"])
@bot.message_handler(commands=["deti"])
def handle_deti(message: Message):
    bot.send_message(
        message.chat.id,
        get_answers_deti() +
        "\n\n<i>–ö—Å—Ç–∞—Ç–∏, —ç—Ç–æ —Ñ–∞–∫—Ç—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏! –û—à–∏–±–∫–∞ –Ω–∞ –æ—à–∏–±–∫–µ!</i>",
        parse_mode="HTML",
        reply_markup=markup)


# –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏–∫–æ–ª—å–Ω–∞—è —Ä–∏—Ñ–º–∞. –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Ñ–∞–π–ª–µ
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in [' —Ä–∏—Ñ–º', ' –∑–∞—Ä–∏—Ñ–º', '–∫—Ä–Ω—å']),
    content_types=["text"])
@bot.message_handler(commands=["rhyme"])
def handle_deti(message: Message):
    bot.send_message(
        message.chat.id,
        get_answers_rhyme(),
        parse_mode="HTML",
        reply_markup=markup)


print(TOKEN)
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as _ex:
        print(_ex)
        time.sleep(5)
